!/usr/bin/env bash

# Build a portable AppImage starting from a clean system. Other examples at:
# https://github.com/probonopd/AppImages/blob/master/recipes/scribus/Recipe

# NOTES:
#
# 1) IT IS NOT SAFE TO RUN THIS RECIPE ON A PERSISTENT FILESYSTEM! Use either:
#      * A chroot into a Live ISO, squashfs or Docker Image.
#      * Or, a virtual machine on a dedicated build server (e.g. Travis CI)
#    DO NOT RUN THE RECIPE ON A NORMAL COMPUTER OUTSIDE OF A TEMPORARY CHROOT!
#

set -e # Halt on errors
set -x # Be verbose

##########################################################################
# CHECK SYSTEM
##########################################################################

# This script should be run inside CentOS 6 if possible,
# or CentOS 7 if 6 is unavailable for your architecture.
if [ "$(grep "Debian GNU/Linux 8 (jessie)" /etc/*release*)" ]; then
  OS="Debian Jessie"
else
  echo "${0}: Error: Not running on Debian Jessie!" >&2
  exit 1
fi

##########################################################################
# GET DEPENDENCIES
##########################################################################
# only prepare system if not already prepared (custom docker image)
if [ ! -f /etc/system-prepared ]; then
./init.sh
fi

##########################################################################
# BUILD QTQUICKVCP
##########################################################################
export PATH="${PWD}/qt5/bin:$PATH"
export LD_LIBRARY_PATH="${PWD}/qt5/lib:$LD_LIBRARY_PATH"
export QT_PLUGIN_PATH="${PWD}/qt5/plugins"
export QML_IMPORT_PATH="${PWD}/qt5/qml"
export QML2_IMPORT_PATH="${PWD}/qt5/qml"
export QT_QPA_PLATFORM_PLUGIN_PATH="${PWD}/qt5/plugins/platforms"
export QT_INSTALL_PREFIX="${PWD}/qt5"

export ANDROID_NDK_ROOT="${PWD}/android-ndk"
export ANDROID_SDK_ROOT="${PWD}/android-sdk"
export ANDROID_HOME="${PWD}/android-sdk"

# If not building on Travis then might need to fetch QtQuickVcp
[ -d "QtQuickVcp" ] || git clone --depth 1 https://github.com/qtquickvcp/QtQuickVcp.git

cd QtQuickVcp

mkdir -p build.release
cd build.release

# build QtQuickVcp
qmake -r ..
make
make -C src install
make INSTALL_ROOT=android-build install

# check if machinetalk library is installed
ls -lh "${QT_INSTALL_PREFIX}/lib/libmachinetalk-pb2.so"

# compress QtQuick module
zipfile="QtQuickVcp.tar.gz"
mkdir qml
mkdir lib
cp -r $QML_IMPORT_PATH/Machinekit qml/Machinekit
cp ${QT_INSTALL_PREFIX}/lib/libmachinetalk* lib/
tar -zcf $zipfile qml lib
# allow access to archive from outside the chroot
chmod a+rwx $zipfile
chmod a+rwx .
ls -lh $zipfile
rm -r qml

# create apk file
qt-deploy ../build/deployment-scripts/android_armv7.ini --deploy

package=${PWD}/MachinekitClient.apk

# back to home folder
cd ../

##########################################################################
# CREATE ANDROID PACKAGE
##########################################################################

# allow access to Package from outside the chroot
chmod a+rwx "$package"
parent_dir="$(dirname "$package")"
while [ "$(dirname "$parent_dir")" != "$parent_dir" ]; do
  [ "$parent_dir" == "/" ] && break
  chmod a+rwx "$parent_dir"
  parent_dir="$(dirname "$parent_dir")"
done

ls -lh "$package"

##########################################################################
# UPLOAD ANDROID PACKAGE
##########################################################################

if [ "${upload}" ]; then
    # rename binaries
    if [ $release -eq 1 ]; then
        target="QtQuickVcp"
    else
        target="QtQuickVcp_Development"
    fi
    cp build.release/QtQuickVcp.tar.gz ${target}-latest-Android-${platform}.tar.gz
    mv build.release/QtQuickVcp.tar.gz ${target}-${version}-Android-${platform}.tar.gz

    if [ $release -eq 1 ]; then
        target="MachinekitClient"
    else
        target="MachinekitClient_Development"
    fi
    mv build.release/MachinekitClient.apk ${target}-${version}-${platform}.apk
    # deploy apk file to Play Store
    android-publish -s ./build/Linux/android/google_play_credentials.json -p io.machinekit.appdiscover -t production -a MachinekitClient*.apk || true
    chmod a+rwx MachinekitClient*.apk

else
  echo "On branch '$branch' so Package will not be uploaded." >&2
fi
